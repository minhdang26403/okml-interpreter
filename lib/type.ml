(* DO NOT EDIT THIS FILE *)

(* the type of OCaml' types *)
type ty = 
  | Int 
  | Bool 
  | Unit 
  | List of ty
  | Pair of ty * ty
  | Fun of ty * ty
  | Var of int

  
(* 
 * string_of_ty : ty -> bool
 * REQUIRES: true
 * ENSURES: string_of_ty t |-*-> a string representing t
 *)
let rec string_of_ty t = 
  match t with 
  | Int -> "int" 
  | Bool -> "bool"
  | Unit -> "unit" 
  | Var x -> "'a"^(string_of_int x)
  | List t' -> (string_of_ty t') ^ " list"
  | Pair (t1, t2) -> "("^(string_of_ty t1)^" * "^(string_of_ty t2)^")"
  | Fun (t1, t2) -> "("^(string_of_ty t1)^" -> "^(string_of_ty t2)^")"



